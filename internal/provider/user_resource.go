// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

package provider

import (
	"context"
	"fmt"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/team-fenrir/terraform-provider-storagegrid/internal/utils"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ resource.Resource                = &UserResource{}
	_ resource.ResourceWithConfigure   = &UserResource{}
	_ resource.ResourceWithImportState = &UserResource{} // handles Import
)

// NewUserResource is a factory function for the user resource.
func NewUserResource() resource.Resource {
	return &UserResource{}
}

// UserResource defines the resource implementation.
type UserResource struct {
	client *utils.Client
}

// UserResourceModel maps the resource schema data.
type UserResourceModel struct {
	UserName   types.String `tfsdk:"user_name"`
	MemberOf   types.List   `tfsdk:"member_of"`
	FullName   types.String `tfsdk:"full_name"`
	Disable    types.Bool   `tfsdk:"disable"`
	ID         types.String `tfsdk:"id"`
	AccountID  types.String `tfsdk:"account_id"`
	UniqueName types.String `tfsdk:"unique_name"`
	UserURN    types.String `tfsdk:"user_urn"`
	Federated  types.Bool   `tfsdk:"federated"`
}

// Metadata returns the resource type name.
func (r *UserResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_user"
}

// Schema defines the resource's schema.
func (r *UserResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Manages a StorageGrid User.",
		Attributes: map[string]schema.Attribute{
			"user_name": schema.StringAttribute{
				Description: "The unique name for the user (e.g., 'Test1'). The 'user/' prefix is added automatically. This cannot be changed after creation.",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"full_name": schema.StringAttribute{
				Description: "The user's full name. If omitted, it defaults to the value of 'user_name'.",
				Optional:    true,
				Computed:    true,
			},
			"member_of": schema.ListAttribute{
				Description: "A list of group names that the user should be a member of. The groups must already exist.",
				ElementType: types.StringType,
				Optional:    true,
			},
			"disable": schema.BoolAttribute{
				Description: "Set to true to disable the user account. Defaults to false.",
				Optional:    true,
				Computed:    true,
				Default:     booldefault.StaticBool(false),
			},
			"id": schema.StringAttribute{
				Description: "The unique identifier (ID) for the user, generated by StorageGrid.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"account_id": schema.StringAttribute{
				Description: "The account ID associated with the user.",
				Computed:    true,
			},
			"unique_name": schema.StringAttribute{
				Description: "The canonical unique name of the user.",
				Computed:    true,
			},
			"user_urn": schema.StringAttribute{
				Description: "The URN of the user.",
				Computed:    true,
			},
			"federated": schema.BoolAttribute{
				Description: "Indicates if the user is federated.",
				Computed:    true,
			},
		},
	}
}

// Configure adds the provider configured client to the resource.
func (r *UserResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}
	client, ok := req.ProviderData.(*utils.Client)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *utils.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)
		return
	}
	r.client = client
}

// Create creates the user resource and sets the initial state.
func (r *UserResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan UserResourceModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var groupIDs []string
	if !plan.MemberOf.IsNull() && !plan.MemberOf.IsUnknown() {
		var groupNames []string
		diags := plan.MemberOf.ElementsAs(ctx, &groupNames, false)
		resp.Diagnostics.Append(diags...)
		if resp.Diagnostics.HasError() {
			return
		}
		for _, groupName := range groupNames {
			apiGroup, err := r.client.GetGroup("group/" + groupName)
			if err != nil {
				resp.Diagnostics.AddError("Error Finding Group", fmt.Sprintf("Could not find group '%s' to add user to: %s", groupName, err.Error()))
				return
			}
			groupIDs = append(groupIDs, apiGroup.Data.ID)
		}
	}

	fullName := plan.UserName.ValueString()
	if !plan.FullName.IsNull() && !plan.FullName.IsUnknown() {
		fullName = plan.FullName.ValueString()
	}

	payload := utils.UserPayload{
		UniqueName: "user/" + plan.UserName.ValueString(),
		FullName:   fullName,
		MemberOf:   groupIDs,
		Disable:    plan.Disable.ValueBool(),
	}

	createdUser, err := r.client.CreateUser(payload)
	if err != nil {
		resp.Diagnostics.AddError("Error Creating User", "Could not create user, unexpected error: "+err.Error())
		return
	}

	plan.ID = types.StringValue(createdUser.Data.ID)
	plan.AccountID = types.StringValue(createdUser.Data.AccountID)
	plan.UniqueName = types.StringValue(createdUser.Data.UniqueName)
	plan.UserURN = types.StringValue(createdUser.Data.UserURN)
	plan.Federated = types.BoolValue(createdUser.Data.Federated)
	plan.FullName = types.StringValue(createdUser.Data.FullName)
	plan.Disable = types.BoolValue(createdUser.Data.Disable)

	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
}

// Read refreshes the user resource state from the API.
func (r *UserResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state UserResourceModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	apiUser, err := r.client.GetUser(state.ID.ValueString())
	if err != nil {
		if strings.Contains(err.Error(), "status: 404") {
			resp.State.RemoveResource(ctx)
			return
		}
		resp.Diagnostics.AddError("Error Reading User", fmt.Sprintf("Could not read user with ID %s: %s", state.ID.ValueString(), err.Error()))
		return
	}

	userData := apiUser.Data

	var groupNames []string
	for _, groupID := range userData.MemberOf {
		group, err := r.client.GetGroup(groupID)
		if err != nil {
			resp.Diagnostics.AddWarning("Could Not Read Member Group", fmt.Sprintf("User is a member of group with ID %s, but it could not be fetched: %s", groupID, err.Error()))
			continue
		}
		groupNames = append(groupNames, strings.TrimPrefix(group.Data.UniqueName, "group/"))
	}

	state.UserName = types.StringValue(strings.TrimPrefix(userData.UniqueName, "user/"))
	state.FullName = types.StringValue(userData.FullName)
	state.Disable = types.BoolValue(userData.Disable)
	state.AccountID = types.StringValue(userData.AccountID)
	state.UniqueName = types.StringValue(userData.UniqueName)
	state.UserURN = types.StringValue(userData.UserURN)
	state.Federated = types.BoolValue(userData.Federated)
	state.MemberOf, diags = types.ListValueFrom(ctx, types.StringType, groupNames)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
}

func (r *UserResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan UserResourceModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var groupIDs []string
	if !plan.MemberOf.IsNull() && !plan.MemberOf.IsUnknown() {
		var groupNames []string
		diags := plan.MemberOf.ElementsAs(ctx, &groupNames, false)
		resp.Diagnostics.Append(diags...)
		if resp.Diagnostics.HasError() {
			return
		}
		for _, groupName := range groupNames {
			apiGroup, err := r.client.GetGroup("group/" + groupName)
			if err != nil {
				resp.Diagnostics.AddError("Error Finding Group", fmt.Sprintf("Could not find group '%s' to add user to: %s", groupName, err.Error()))
				return
			}
			groupIDs = append(groupIDs, apiGroup.Data.ID)
		}
	}

	fullName := plan.UserName.ValueString()
	if !plan.FullName.IsNull() && !plan.FullName.IsUnknown() {
		fullName = plan.FullName.ValueString()
	}

	id := plan.ID.ValueString()

	payload := utils.UserPayload{
		UniqueName: "user/" + plan.UserName.ValueString(),
		FullName:   fullName,
		MemberOf:   groupIDs,
		Disable:    plan.Disable.ValueBool(),
	}

	_, err := r.client.UpdateUser(id, payload)
	if err != nil {
		resp.Diagnostics.AddError("Error Updating User", fmt.Sprintf("Could not update user with ID %s: %s", id, err.Error()))
		return
	}

	apiUser, err := r.client.GetUser(id)
	if err != nil {
		resp.Diagnostics.AddError("Error Re-reading User After Update", fmt.Sprintf("Could not read user with ID %s after update: %s", id, err.Error()))
		return
	}

	userData := apiUser.Data

	var finalGroupNames []string
	for _, groupID := range userData.MemberOf {
		group, err := r.client.GetGroup(groupID)
		if err != nil {
			resp.Diagnostics.AddWarning("Could Not Read Member Group", fmt.Sprintf("User is a member of group with ID %s, but it could not be fetched: %s", groupID, err.Error()))
			continue
		}
		finalGroupNames = append(finalGroupNames, strings.TrimPrefix(group.Data.UniqueName, "group/"))
	}

	plan.MemberOf, diags = types.ListValueFrom(ctx, types.StringType, finalGroupNames)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	plan.FullName = types.StringValue(userData.FullName)
	plan.Disable = types.BoolValue(userData.Disable)
	plan.AccountID = types.StringValue(userData.AccountID)
	plan.UniqueName = types.StringValue(userData.UniqueName)
	plan.UserURN = types.StringValue(userData.UserURN)
	plan.Federated = types.BoolValue(userData.Federated)

	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
}

func (r *UserResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state UserResourceModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	err := r.client.DeleteUser(state.ID.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error Deleting User", fmt.Sprintf("Could not delete user with ID %s: %s", state.ID.ValueString(), err.Error()))
		return
	}
}

func (r *UserResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	userName := req.ID
	apiUniqueName := "user/" + userName

	apiUser, err := r.client.GetUser(apiUniqueName)
	if err != nil {
		if strings.Contains(err.Error(), "status: 404") {
			resp.Diagnostics.AddError(
				"User Not Found",
				fmt.Sprintf("Cannot import a user with name '%s' because it does not exist.", userName),
			)
			return
		}
		resp.Diagnostics.AddError(
			"Error Importing User",
			fmt.Sprintf("Could not import user with name %s: %s", userName, err.Error()),
		)
		return
	}

	userData := apiUser.Data
	var state UserResourceModel

	// The API returns group IDs. We must convert them to group names for the state.
	var groupNames []string
	for _, groupID := range userData.MemberOf {
		group, err := r.client.GetGroup(groupID)
		if err != nil {
			resp.Diagnostics.AddWarning("Could Not Read Member Group on Import", fmt.Sprintf("User is a member of group with ID %s, but it could not be fetched: %s", groupID, err.Error()))
			continue
		}
		groupNames = append(groupNames, strings.TrimPrefix(group.Data.UniqueName, "group/"))
	}

	// Map the API response to the Terraform state.
	state.ID = types.StringValue(userData.ID)
	state.UserName = types.StringValue(strings.TrimPrefix(userData.UniqueName, "user/"))
	state.FullName = types.StringValue(userData.FullName)
	state.Disable = types.BoolValue(userData.Disable)
	state.AccountID = types.StringValue(userData.AccountID)
	state.UniqueName = types.StringValue(userData.UniqueName)
	state.UserURN = types.StringValue(userData.UserURN)
	state.Federated = types.BoolValue(userData.Federated)

	var diags diag.Diagnostics
	state.MemberOf, diags = types.ListValueFrom(ctx, types.StringType, groupNames)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Set the imported state.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
